import Head from "next/head";
import Image from "next/image";
import { createServerSupabaseClient } from "@supabase/auth-helpers-nextjs";
import { useSupabaseClient } from "@supabase/auth-helpers-react";
import { useRouter } from "next/router";
import { useState, useEffect } from "react";
import Avatar from "../../components/Avatar";
import TM_PieChart from "../../components/TM_PieChart";

export default function Home({ user, training }) {
  const supabaseClient = useSupabaseClient();
  const router = useRouter();

  const [plancount, setPlanCount] = useState(true);

  useEffect(() => {
    getPlanData();
  }, [user]);

  //getting plan data
  async function getPlanData() {
    let { count, error } = await supabaseClient
      .from("training_plans")
      .select("*", { count: "exact", head: true });
    if (error) {
      console.log(error);
    }
    if (count) {
      setPlanCount(count);
    }
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="bg-blue-700 hover:bg-blue-600 p-8">
        <div className="box-decoration-clone bg-gradient-to-r from-indigo-600 to-pink-500 text-white mb-8 p-4 text-6xl w-96">
          TrainMe
        </div>
        <div>
          <Avatar
            uid={user.id}
            url={user.avatarurl}
            size={150}
            readOnly={true}
          />
        </div>
        <div className="text-white my-4 text-2xl">{user.name}</div>
        <div>{user.website}</div>
        <button
          className="button block"
          onClick={async () => {
            await router.push("/protected/profile");
          }}
        >
          {" "}
          Profile
        </button>
        <button
          className="button block"
          onClick={async () => {
            await supabaseClient.auth.signOut();
            router.push("/");
          }}
        >
          {" "}
          Sign Out
        </button>
      </div>

      <main className="text-3xl font-bold underline">
        {user.email} {user.name} {user.website} {user.avatarurl} ------{" "}
        {training.agg.act_pcs_tot}
        {training.agg.pla_pcs_tot}
        <TM_PieChart />
        {plancount}
      </main>

      <footer></footer>
    </div>
  );
}

export const getServerSideProps = async (ctx) => {
  // Create authenticated Supabase Client
  const supabaseServer = createServerSupabaseClient(ctx);
  // Check if we have a session
  const {
    data: { session },
  } = await supabaseServer.auth.getSession();

  if (!session) return { redirect: { destination: "/", permanent: false } };

  //query user data
  const userdata = {};
  let {
    data: sb_userdata,
    error: sb_usererror,
    status: sb_userstatus,
  } = await supabaseServer
    .from("profiles")
    .select(`username, website, avatar_url,strava_id`)
    .eq("id", session.user.id)
    .single();
  if (sb_userdata) {
    userdata.email = session.user.email;
    userdata.id = session.user.id;
    userdata.name = sb_userdata.username;
    userdata.website = sb_userdata.website;
    userdata.avatarurl = sb_userdata.avatar_url;
    userdata.stravaid = sb_userdata.strava_id;
  }

  //query training data
  const trainingdata = {};

  // getting aggregated data
  let {
    data: sb_tr_agg_data,
    error: sb_tr_agg_error,
    status: sb_tr_agg_status,
  } = await supabaseServer.rpc("get_training_data_agg", {
    userid: session.user.id,
  });
  if (sb_tr_agg_data) {
    let parsed = JSON.parse(sb_tr_agg_data);
    trainingdata.agg = parsed;
  }

  // getting detailed data
  let {
    data: sb_tr_det_data,
    error: sb_tr_det_error,
    status: sb_tr_det_status,
  } = await supabaseServer.rpc("get_training_data_detail", {
    userid: session.user.id,
  });
  if (sb_tr_det_data) {
    let parsed = JSON.parse(sb_tr_det_data);
    trainingdata.lines = parsed;
  }

  console.log(trainingdata);

  return {
    props: {
      initialSession: session,
      user: userdata,
      training: trainingdata,
    },
  };
};
